#!/usr/bin/env bash
# This script was generated by bashly 1.1.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  # shellcheck shell=bash

  if [ "${KBG_DEBUG:-}" = "true" ]; then
      inspect_args >&2
  fi

  rg_options=(
      --fixed-strings
      --files-with-matches
      --ignore-case
  )

  if [ "${args[--full-words]:-}" != "" ]; then
      rg_options+=(--word-regexp)
  fi

  fzf_cmd="SHELL=sh fzf \
      --multi --exit-0 \
      --preview 'bat --color always --terminal-width \${FZF_PREVIEW_COLUMNS} --wrap auto {}' \
      --preview-window 'up,70%,border-bottom,+{2}+3/3,~3' \
      --bind 'ctrl-j:preview-half-page-down,ctrl-k:preview-half-page-up'"

  terms=("${other_args[@]}")

  if [ "${args[--edit]:-}" != "" ] && [ "${EDITOR:-}" = "" ]; then
      # shellcheck disable=SC2016  # i want a literal dollar sign
      panic '$EDITOR environment variable is not defined.'
  fi

  if [ "${args[--any]:-}" != "" ]; then
      # find files with ANY term. easy case, `rg` supports this natively.

      if [ ${#terms[@]} -eq 0 ]; then
          panic "Must supply search terms with \`--any\`"
      fi

      if [ "${args[--type]:-}" != "" ]; then
          rg_options+=(--type "${args[--type]}")
      fi

      if tty --quiet; then
          # a tty is connected to stdin. that means we're not getting a file list from stdin. we'll
          # let ripgrep handle that.
          rg_command=(rg "${rg_options[@]}")
      else
          # a file list is coming from stdin. xargs those files to the ripgrep command.
          rg_command=(xargs rg "${rg_options[@]}")
      fi

      for t in "${terms[@]}"; do
          escaped_term="$(printf "%q" "${t}")"
          # shellcheck disable=SC2206  # intentionally leaving ${escaped_term} unquoted: string splitting not a concern because it's escaped.
          rg_command+=(--regexp ${escaped_term})
      done

      pipeline=("${rg_command[*]}")

      if [ "${args[--select]:-}" != "" ]; then
          pipeline+=("${fzf_cmd}")
      fi

      if [ "${args[--edit]:-}" != "" ]; then
          readarray -t files_to_edit < <(exec_pipeline "${pipeline[@]}")
          if [ ${#files_to_edit[@]} -gt 0 ]; then
              exec ${EDITOR} "${files_to_edit[@]}"
          else
              exit 1
          fi
      else
          exec_pipeline "${pipeline[@]}"
      fi

  else
      # find files with ALL terms. difficult case, need to pipeline multiple `rg` invocations.
      #
      # given search terms "foo" and "bar", we will effectively construct the following pipeline:
      #
      #     rg --files \
      #         | xargs rg foo \
      #         | xargs rg bar
      #
      # ...but we'll do it dynamically with `exec_pipeline`
      pipeline=()
      for t in "${terms[@]}"; do
          escaped_term="$(printf "%q" "${t}")"
          # shellcheck disable=SC2206  # intentionally leaving ${escaped_term} unquoted: string splitting not a concern because it's escaped.
          filter_cmd=(xargs rg "${rg_options[@]}" --regexp ${escaped_term})
          pipeline+=("${filter_cmd[*]}")
      done

      if [ "${args[--select]:-}" != "" ]; then
          pipeline+=("${fzf_cmd}")
      fi

      if tty --quiet; then
          # a tty is connected to stdin. that means we're not getting a file list from stdin; we need
          # to generate the file list ourselves.
          files_cmd=(rg --files)
          if [ "${args[--type]:-}" != "" ]; then
              files_cmd+=(--type "${args[--type]}")
          fi
          pipeline=("${files_cmd[*]}" "${pipeline[@]}")
      fi

      if [ "${args[--edit]:-}" != "" ]; then
          readarray -t files_to_edit < <(exec_pipeline "${pipeline[@]}")
          if [ ${#files_to_edit[@]} -gt 0 ]; then
              exec ${EDITOR} "${files_to_edit[@]}"
          else
              exit 1
          fi
      else
          exec_pipeline "${pipeline[@]}"
      fi
  fi

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
kbg_usage() {
  if [[ -n $long_usage ]]; then
    printf "kbg - Knowledgebase grep: A search tool optimized for knowledgebases\n"
    echo

  else
    printf "kbg - Knowledgebase grep: A search tool optimized for knowledgebases\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  kbg [OPTIONS] [--] [TERMS...]\n"
  printf "  kbg --help | -h\n"
  printf "  kbg --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--type, -t FILE_TYPE"
    printf "    File type as defined by \`rg --type-list\`\n"
    echo

    # :flag.usage
    printf "  %s\n" "--any, -a"
    printf "    Return files that contain at least one term\n"
    echo

    # :flag.usage
    printf "  %s\n" "--full-words, -w"
    printf "    Search for full words\n"
    echo

    # :flag.usage
    printf "  %s\n" "--select, -s"
    printf "    Interactive file select dialog at end of search\n"
    echo

    # :flag.usage
    printf "  %s\n" "--edit, -e"
    printf "    Edit search results in your \$EDITOR\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    echo "  TERMS..."
    printf "    Terms to search for\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  \\n  # Search for markdown files that contain BOTH terms \"foo\" and \"bar\"\n  # Prompt the user to select files from the search results\n  # Edit all selected files with \$EDITOR\n  kbg --type markdown --select --edit foo bar\n"
    printf "  \\n  # Search for markdown files containing EITHER \"bash\" OR \"shell\"\n  # Narrow down search results containing the phrase \"mac address\"\n  # Prompt the user to select file(s) and edit them in \$EDITOR\n  kbg --type markdown --any bash shell \ \\n    | kbg --select --edit \"mac address\"\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg flags passthru
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/exec_pipeline.sh
# shellcheck shell=bash

exec_pipeline() {
    # execute a list of commands, piping their output from one to the next. allows you to
    # dynamically build a pipeline of commands at runtime.
    #
    # example usage:
    #
    #     echo "foo bar" | exec_pipeline \
    #         'cut --delimiter " " --fields 2' \
    #         'tr "[:lower:]" "[:upper:]"'
    #
    # this is the same as running:
    #
    #     echo "foo bar" | cut --delimiter " " --fields 2 | tr "[:lower:]" "[:upper:]"
    #
    # and outputs:
    #
    #     BAR
    #
    # thanks to <https://stackoverflow.com/a/63981571/138757> for the idea
    if [ ${#} -gt 0 ]; then
        local current="${1}"
        shift
        eval "${current}" | exec_pipeline "${@}"
    else
        cat
    fi
}

# src/lib/panic.sh
# shellcheck shell=bash

panic() {
    echo "${*}" >&2
    exit 1
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        kbg_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v rg >/dev/null 2>&1; then
    deps['rg']="$(command -v rg | head -n1)"
  else
    printf "missing dependency: rg\n" >&2
    printf "%s\n" "Ripgrep installation instructions: <https://github.com/BurntSushi/ripgrep?tab=readme-ov-file#installation>" >&2
    exit 1
  fi

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --type | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--type']="$2"
          shift
          shift
        else
          printf "%s\n" "--type requires an argument: --type, -t FILE_TYPE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --any | -a)

        # :flag.case_no_arg
        args['--any']=1
        shift
        ;;

      # :flag.case
      --full-words | -w)

        # :flag.case_no_arg
        args['--full-words']=1
        shift
        ;;

      # :flag.case
      --select | -s)

        # :flag.case_no_arg
        args['--select']=1
        shift
        ;;

      # :flag.case
      --edit | -e)

        # :flag.case_no_arg
        args['--edit']=1
        shift
        ;;

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        other_args+=("$1")
        shift

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -Eeuo pipefail

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
