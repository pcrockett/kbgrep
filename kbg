#!/usr/bin/env bash
# This script was generated by bashly 1.1.9 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  # shellcheck shell=bash
  # shellcheck disable=SC2154  # we use variables that will be defined after bashly runs

  if [ "${KBG_DEBUG:-}" = "true" ]; then
      inspect_args >&2
  fi

  eval "terms=(${args[term]})"

  rg_command=(rg --fixed-strings --files-with-matches)

  for t in "${terms[@]}"; do
      rg_command+=(--regexp "${t}")
  done

  "${rg_command[@]}"

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
kbg_usage() {
  if [[ -n $long_usage ]]; then
    printf "kbg - Knowledgebase grep: A search tool optimized for knowledgebases\n"
    echo

  else
    printf "kbg - Knowledgebase grep: A search tool optimized for knowledgebases\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  kbg TERM... [OPTIONS]\n"
  printf "  kbg --help | -h\n"
  printf "  kbg --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--type, -t FILE_TYPE"
    printf "    File type as defined by \`rg --type-list\`\n"
    echo

    # :flag.usage
    printf "  %s\n" "--and, -a"
    printf "    Return files that contain all terms\n"
    echo

    # :flag.usage
    printf "  %s\n" "--or, -o"
    printf "    Return files that contain at least one term\n"
    echo

    # :flag.usage
    printf "  %s\n" "--select, -s"
    printf "    Interactive file select dialog at end of search\n"
    echo

    # :flag.usage
    printf "  %s\n" "--edit, -e"
    printf "    Edit search results in your \$EDITOR\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TERM..."
    printf "    Term to search for\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  \\n  # Search for markdown files that contain BOTH terms \"foo\" and \"bar\"\n  # Prompt the user to select files from the search results\n  # Edit all selected files with \$EDITOR\n  kbg --type markdown --select --edit --and foo bar\n"
    printf "  \\n  # Search for markdown files containing EITHER \"bash\" OR \"shell\"\n  # Narrow down search results containing the phrase \"mac address\"\n  # Prompt the user to select file(s) and edit them in \$EDITOR\n  kbg --type markdown --or bash shell \ \\n    | kbg --select --edit \"mac address\"\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        kbg_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --type | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--type']="$2"
          shift
          shift
        else
          printf "%s\n" "--type requires an argument: --type, -t FILE_TYPE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --and | -a)

        # :flag.case_no_arg
        args['--and']=1
        shift
        ;;

      # :flag.case
      --or | -o)

        # :flag.case_no_arg
        args['--or']=1
        shift
        ;;

      # :flag.case
      --select | -s)

        # :flag.case_no_arg
        args['--select']=1
        shift
        ;;

      # :flag.case
      --edit | -e)

        # :flag.case_no_arg
        args['--edit']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_repeatable
        # :argument.case_repeatable
        escaped="$(printf '%q' "$1")"
        if [[ -z ${args['term']+x} ]]; then
          args['term']="$escaped"
        else
          args['term']="${args['term']} $escaped"

        fi
        shift

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['term']+x} ]]; then
    printf "missing required argument: TERM\nusage: kbg TERM... [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
